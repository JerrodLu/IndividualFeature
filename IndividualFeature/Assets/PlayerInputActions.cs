//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""80bbbc8b-7c4e-42d4-bbcf-f6241a3460c9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c81e9db4-0cad-4ed9-868b-da0ebfc76dce"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FireBullet"",
                    ""type"": ""Button"",
                    ""id"": ""c233e63f-0bb0-4643-b515-324fcd3fab9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRotate"",
                    ""type"": ""Value"",
                    ""id"": ""32ef3979-c6fc-4072-a8b1-4d731b9466fd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionSkillPhasecast"",
                    ""type"": ""Button"",
                    ""id"": ""8d98d942-b1b4-4c33-9b25-54ef4f8c92d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionSkillPhasegrasp"",
                    ""type"": ""Button"",
                    ""id"": ""ec0fd5f7-8f78-46e1-8a65-c16bf4633fe2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""1d524010-e184-4948-932d-f70289def8f6"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""64e0877e-5f33-4536-a7f2-cd419660e132"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c7761548-3601-4dd7-847f-8ce8f8b0fe04"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""4f5b4cd2-bb65-40e0-b918-6839bbacd555"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""4c440ab1-cb47-4c88-bc41-de37322cbc3d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""76020f7c-1860-4d6e-bbd9-cf985e2aa274"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireBullet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9f1279a9-966c-424a-bfa9-c3502d265ed6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a5e99798-3cc5-4756-a124-32ec88a8b5ce"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0cc8b728-18ac-41ce-8165-400935db5627"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e3ae3ee1-be2a-48d3-9762-adc26dd806d5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionSkillPhasecast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10b38ab7-ef25-41fb-ad99-233d638d5a19"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionSkillPhasegrasp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_FireBullet = m_Player.FindAction("FireBullet", throwIfNotFound: true);
        m_Player_MouseRotate = m_Player.FindAction("MouseRotate", throwIfNotFound: true);
        m_Player_ActionSkillPhasecast = m_Player.FindAction("ActionSkillPhasecast", throwIfNotFound: true);
        m_Player_ActionSkillPhasegrasp = m_Player.FindAction("ActionSkillPhasegrasp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_FireBullet;
    private readonly InputAction m_Player_MouseRotate;
    private readonly InputAction m_Player_ActionSkillPhasecast;
    private readonly InputAction m_Player_ActionSkillPhasegrasp;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @FireBullet => m_Wrapper.m_Player_FireBullet;
        public InputAction @MouseRotate => m_Wrapper.m_Player_MouseRotate;
        public InputAction @ActionSkillPhasecast => m_Wrapper.m_Player_ActionSkillPhasecast;
        public InputAction @ActionSkillPhasegrasp => m_Wrapper.m_Player_ActionSkillPhasegrasp;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @FireBullet.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFireBullet;
                @FireBullet.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFireBullet;
                @FireBullet.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFireBullet;
                @MouseRotate.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseRotate;
                @MouseRotate.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseRotate;
                @MouseRotate.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseRotate;
                @ActionSkillPhasecast.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActionSkillPhasecast;
                @ActionSkillPhasecast.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActionSkillPhasecast;
                @ActionSkillPhasecast.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActionSkillPhasecast;
                @ActionSkillPhasegrasp.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActionSkillPhasegrasp;
                @ActionSkillPhasegrasp.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActionSkillPhasegrasp;
                @ActionSkillPhasegrasp.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActionSkillPhasegrasp;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @FireBullet.started += instance.OnFireBullet;
                @FireBullet.performed += instance.OnFireBullet;
                @FireBullet.canceled += instance.OnFireBullet;
                @MouseRotate.started += instance.OnMouseRotate;
                @MouseRotate.performed += instance.OnMouseRotate;
                @MouseRotate.canceled += instance.OnMouseRotate;
                @ActionSkillPhasecast.started += instance.OnActionSkillPhasecast;
                @ActionSkillPhasecast.performed += instance.OnActionSkillPhasecast;
                @ActionSkillPhasecast.canceled += instance.OnActionSkillPhasecast;
                @ActionSkillPhasegrasp.started += instance.OnActionSkillPhasegrasp;
                @ActionSkillPhasegrasp.performed += instance.OnActionSkillPhasegrasp;
                @ActionSkillPhasegrasp.canceled += instance.OnActionSkillPhasegrasp;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnFireBullet(InputAction.CallbackContext context);
        void OnMouseRotate(InputAction.CallbackContext context);
        void OnActionSkillPhasecast(InputAction.CallbackContext context);
        void OnActionSkillPhasegrasp(InputAction.CallbackContext context);
    }
}
